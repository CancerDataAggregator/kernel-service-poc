plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'com.google.cloud.tools.jib' version '1.6.1'
	id "org.openapi.generator" version "4.2.3"
}

group = 'bio.terra.TEMPLATE'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jdbc'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
	implementation group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
	implementation group: 'org.apache.commons', name: 'commons-pool2', version: '2.8.0'
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

// OpenAPI Server Generation
// - specify the source and target
// - define the generation
// - define the validation
// - add to the clean target
def openapiSourceFile = 'src/main/resources/service_openapi.yaml'

openApiGenerate {
	generatorName = "spring"
	inputSpec = "${projectDir}/$openapiSourceFile".toString()
	outputDir = "${buildDir}/generated".toString()
	invokerPackage = "${group}.invoker"
	apiPackage = "${group}.controller"
	modelPackage = "${group}.model"
	configOptions = [
	        interfaceOnly : "true",
			useTags : "true",
			library : "spring-boot",
			dateLibrary : "java8",
			generateApiTests : "false",
			generateApiDocumentation : "false",
			generateModelTests : "false",
			generateModelDocumentation : "false",
	]
}

openApiValidate {
	inputSpec = "${projectDir}/$openapiSourceFile".toString()
}

clean.doFirst {
	delete("${buildDir}/generated")
}

// end of OpenAPI Server Generation

test {
	useJUnitPlatform()
}

sourceSets {
	generated {
		compileClasspath = configurations.generatedCompile
	}
	main {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
	test {
		compileClasspath += generated.output
		runtimeClasspath += generated.output
	}
}

bootRun {
	classpath += sourceSets.generated.output
}

compileGeneratedJava.dependsOn tasks.openApiGenerate
classes.dependsOn generatedClasses
compileJava.dependsOn compileGeneratedJava
ideaModule.dependsOn tasks.openApiGenerate