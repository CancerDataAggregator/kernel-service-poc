name: GCR Push

on:
  push:
    branches:
    - zloery-dev
    - master
jobs:
  build-deploy-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current code
      uses: actions/checkout@v2
    - name: Get Vault token
      id: vault-token-step
      uses: 'docker://vault:1.1.0'
      env:
        VAULT_ADDR: "https://clotho.broadinstitute.org:8200"
      with:
        entrypoint: "/bin/sh"
        args: "-c \"VAULT_TKN=`/usr/local/bin/docker-entrypoint.sh vault write -field token auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }}`;echo \"::set-output name=vault-token::$VAULT_TKN\"\""
    - name: Pull Vault secrets
      id: vault-secret-step
      uses: 'docker://vault:1.1.0'
      env:
        VAULT_TOKEN: ${{ steps.vault-token-step.outputs.vault-token }}
        VAULT_ADDR: "https://clotho.broadinstitute.org:8200"
      with:
        entrypoint: "/bin/sh"
        args: "-c 'VAULT_SECRETS=$(/usr/local/bin/docker-entrypoint.sh vault read -format json secret/dsde/terra/kernel/test);echo \"::set-output name=vault-secrets::$VAULT_SECRETS\"'"
    - name: Parse vault JSON output
      id: vault-parse-step
      run: |
        echo "::set-output gcr_sa_email=\"($echo ${{ steps.vault-secret-step.outputs.vault-secrets }} | jq --raw-output '.data.testk')\""
        echo "::set-output gcr_sa_key=\"($echo ${{ steps.vault-secret-step.outputs.vault-secrets }} | jq --raw-output '.data.testk')\""
    - name: Auth to GCR
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ steps.vault-parse-step.outputs.gcr_sa_email }}
        service_account_key: ${{ steps.vault-parse-step.outputs.gcr_sa_key }}
    - name: Explicitly auth Docker for GCR
      run: gcloud auth configure-docker --quiet
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build and push GCR image using Jib
      run: "./gradlew jib --image=gcr.io/terra-kernel-k8s/workspace-test:ephemeral-test"
#    - name: Auth to existing K8s cluster
#      uses: azure/k8s-set-context@v1
#      with:
#        method: service-account
#        k8s-url: ${{ steps.vault-secret-step.outputs.k8s_api_url }}
#        k8s-secret: ${{ steps.vault-secret-step.outputs.k8s_sa_key }}
#    - name: Deploy service to Dev namepsace
#      run: "kubectl apply -k kustomize.yaml"