name: GCR Push

on:
  push:
    branches:
    - zloery-dev
    - master
jobs:
  build-deploy-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout current code
      uses: actions/checkout@v2
    - name: Pull Vault image
      run: docker pull vault:1.1.0
    # Currently, there's no way to add capabilities to Docker actions on Git, and Vault needs IPC_LOCK to run.
    - name: Get Vault token
      id: vault-token-step
      run: |
        docker run --rm --cap-add IPC_LOCK \
          -e "VAULT_ADDR=https://clotho.broadinstitute.org:8200" \
          --entrypoint "/bin/sh" \
          vault:1.1.0 \
          -c "VAULT_TKN=\`/usr/local/bin/docker-entrypoint.sh vault write -field token auth/approle/login role_id=${{ secrets.VAULT_APPROLE_ROLE_ID }} secret_id=${{ secrets.VAULT_APPROLE_SECRET_ID }}\`;\
            echo ::set-output name=vault-token::\$VAULT_TKN;\
            echo ::add-mask::\$VAULT_TKN"
    - name: Get Vault secrets
      id: vault-secret-step
      run: |
        docker run --rm --cap-add IPC_LOCK \
          -e "VAULT_TOKEN=${{ steps.vault-token-step.outputs.vault-token }}" \
          -e "VAULT_ADDR=https://clotho.broadinstitute.org:8200" \
          --entrypoint "/bin/sh" \
          vault:1.1.0 \
          -c "GCR_EMAIL=\`/usr/local/bin/docker-entrypoint.sh vault read -field ci-gcr-sa-email secret/dsde/terra/kernel/test\`;\
            echo ::set-output name=gcr-email::\$GCR_EMAIL;\
            echo ::add-mask::\$GCR_EMAIL;\
          GCR_KEY=\`/usr/local/bin/docker-entrypoint.sh vault read -field ci-gcr-sa-key secret/dsde/terra/kernel/test\`;\
            echo ::set-output name=gcr-key::\$GCR_KEY;\
            echo ::add-mask::\$GCR_KEY;\
          K8S_URL=\`/usr/local/bin/docker-entrypoint.sh vault read -field k8s-api-ip secret/dsde/terra/kernel/test\`;\
            echo ::set-output name=k8s-url::\$K8S_URL;\
            echo ::add-mask::\$K8S_URL;\
          K8S_KEY=\`/usr/local/bin/docker-entrypoint.sh vault read -field k8s-sa-key secret/dsde/terra/kernel/test\`;\
            K8S_KEY=\"${K8S_KEY//\$'\n'/'%0A'}\";\
            echo ::set-output name=k8s-key::\"\$K8S_KEY\";\
            echo ::add-mask::\$K8S_KEY"
    - name: Auth to GCR
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ steps.vault-secret-step.outputs.gcr-email }}
        service_account_key: ${{ steps.vault-secret-step.outputs.gcr-key }}
    - name: Explicitly auth Docker for GCR
      run: gcloud auth configure-docker --quiet
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build and push GCR image using Jib
      run: "./gradlew jib --image=gcr.io/terra-kernel-k8s/workspace-test:${{ github.sha }}"
    - name: Install Kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.15.0'
      id: install-kubectl
    - name: Auth to existing K8s cluster
      uses: azure/k8s-set-context@v1
      with:
        method: service-account
        k8s-url: ${{ steps.vault-secret-step.outputs.k8s-url }}
        k8s-secret: |
          ${{ steps.vault-secret-step.outputs.k8s-key }}
    - name: Update dev deployment to use latest image
      run: |
        cd config
        kustomize edit set imagetag gcr.io/terra-kernel-k8s/workspace-test:${{ github.sha }}
    - name: Deploy service directly to Dev namepsace
      run: "kubectl kustomize . | kubectl apply -f -"